/*
** EPITECH PROJECT, GREEN_WALLEMPTYGREEN_WALLYELLOW_WALL
** Doom
** File description:
** Map.cpp
*/

#include "Map.hpp"
#include <ranges>
#include <iostream>
#include "Game.hpp"

Map::Map()
    : _worldMap
    {
        worldLine{BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL},
        worldLine{BLUE_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,GREEN_WALL,GREEN_WALL,GREEN_WALL,GREEN_WALL,GREEN_WALL,EMPTY,EMPTY,EMPTY,EMPTY,RED_WALL,EMPTY,RED_WALL,EMPTY,RED_WALL,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,GREEN_WALL,EMPTY,EMPTY,EMPTY,GREEN_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,GREEN_WALL,EMPTY,EMPTY,EMPTY,GREEN_WALL,EMPTY,EMPTY,EMPTY,EMPTY,RED_WALL,EMPTY,EMPTY,EMPTY,RED_WALL,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,GREEN_WALL,EMPTY,EMPTY,EMPTY,GREEN_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,GREEN_WALL,GREEN_WALL,EMPTY,GREEN_WALL,GREEN_WALL,EMPTY,EMPTY,EMPTY,EMPTY,RED_WALL,EMPTY,RED_WALL,EMPTY,RED_WALL,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,YELLOW_WALL,YELLOW_WALL,YELLOW_WALL,YELLOW_WALL,YELLOW_WALL,YELLOW_WALL,YELLOW_WALL,YELLOW_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,YELLOW_WALL,EMPTY,YELLOW_WALL,EMPTY,EMPTY,EMPTY,EMPTY,YELLOW_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,YELLOW_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,YELLOW_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,YELLOW_WALL,EMPTY,YELLOW_WALL,EMPTY,EMPTY,EMPTY,EMPTY,YELLOW_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,YELLOW_WALL,EMPTY,YELLOW_WALL,YELLOW_WALL,YELLOW_WALL,YELLOW_WALL,YELLOW_WALL,YELLOW_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,YELLOW_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,YELLOW_WALL,YELLOW_WALL,YELLOW_WALL,YELLOW_WALL,YELLOW_WALL,YELLOW_WALL,YELLOW_WALL,YELLOW_WALL,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,BLUE_WALL},
        worldLine{BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL,BLUE_WALL}
    },
    _rectangle({
        (SCREEN_WIDTH / MAP_WIDTH),
        (SCREEN_HEIGHT / MAP_HEIGHT)
    })
{
    // _rectangle.getOutlineThickness()
}

world &Map::getMap()
{
    return _worldMap;
}

void Map::render(sf::RenderWindow &window)
{
    for (auto [y, line] : std::views::enumerate(_worldMap)) {
        for (auto [x, tile]: std::views::enumerate(line)) {
            drawTile(
                window,
                x * (SCREEN_WIDTH / MAP_WIDTH),
                y * (SCREEN_HEIGHT / MAP_HEIGHT),
                tile
            );
        }
    }
}

void Map::drawTile(sf::RenderWindow &window, int x, int y, blockType type)
{
    sf::Color color{};

    _rectangle.setPosition({x, y});
    switch (type) {
        case EMPTY:
            color = sf::Color::Black;
            break;
        case BLUE_WALL:
            color = sf::Color::Blue;
            break;
        case GREEN_WALL:
            color = sf::Color::Green;
            break;
        case RED_WALL:
            color = sf::Color::Red;
            break;
        case YELLOW_WALL:
            color = sf::Color::Yellow;
            break;
    }
    _rectangle.setFillColor(color);
    window.draw(_rectangle);
}
